{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Entrega Atividade Individual Rafaela Aff\u00e9rri","text":"<p>Este projeto implementa uma API REST em Java com Spring Boot baseada nos exerc\u00edcios da Plataform Insper. A API oferece funcionalidades como autentica\u00e7\u00e3o, cadastro de usu\u00e1rios e cadastro de Produtos</p> <p>Aluna: Rafaela Afferri Curso: Ci\u00eancias da Computa\u00e7\u00e3o Professor: Humberto Sandmann</p>"},{"location":"#arquitetura-baseada-em-microsservicos","title":"Arquitetura baseada em Microsservi\u00e7os","text":"<p>Este projeto foi desenvolvido seguindo a arquitetura de microsservi\u00e7os, onde cada funcionalidade principal do sistema est\u00e1 desacoplada em um servi\u00e7o independente. Os microsservi\u00e7os implementados foram:</p> <ul> <li>Product: gerenciamento de produtos dispon\u00edveis na plataforma.</li> <li>Order: respons\u00e1vel pela cria\u00e7\u00e3o e controle de pedidos.</li> <li>Exchange: Realiza convers\u00e3o de c\u00e2mbio de moedas</li> <li>Auth: autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o de usu\u00e1rios.</li> <li>Account: gerenciamento de informa\u00e7\u00f5es de conta dos usu\u00e1rios.</li> </ul> <p>Todos os microsservi\u00e7os s\u00e3o acessados por meio de um API Gateway, que centraliza as requisi\u00e7\u00f5es e encaminha para o servi\u00e7o correspondente, garantindo seguran\u00e7a, escalabilidade e organiza\u00e7\u00e3o da comunica\u00e7\u00e3o entre os componentes. Voc\u00ea encontra mais informa\u00e7\u00f5es sobre os microservi\u00e7os e suas respectivas paginas</p> <p>Os microservi\u00e7os podem ser visualizados neste diagrama:</p> <pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        auth --&gt; account\n        gateway --&gt; exchange\n        gateway --&gt; product\n        gateway --&gt; order:::red\n        product --&gt; db\n        order --&gt; db\n        order --&gt; product\n    end\n    exchange --&gt; 3partyapi@{label: \"3rd-party API (Awsome API)\"}\n    internet --&gt;|request| gateway\n\n    classDef red fill:#fcc\n\n</code></pre>"},{"location":"#video-de-demonstracao-da-api","title":"V\u00eddeo de Demonstra\u00e7\u00e3o da API","text":"<p>Video da API em funcionamento:</p>"},{"location":"#referencias","title":"Refer\u00eancias","text":"<p>Material for MkDocs --&gt;</p>"},{"location":"index%20copy/","title":"Entrega Atividade Individual Rafaela Aff\u00e9rri","text":"<p>Este projeto implementa uma API REST em Java com Spring Boot baseada nos exerc\u00edcios da Plataform Insper. A API oferece funcionalidades como autentica\u00e7\u00e3o, cadastro de usu\u00e1rios e cadastro de Produtos</p> <p>Aluna: Rafaela Afferri Curso: Ci\u00eancias da Computa\u00e7\u00e3o Professor: Humberto Sandmann</p>"},{"location":"index%20copy/#arquitetura-baseada-em-microsservicos","title":"Arquitetura baseada em Microsservi\u00e7os","text":"<p>Este projeto foi desenvolvido seguindo a arquitetura de microsservi\u00e7os, onde cada funcionalidade principal do sistema est\u00e1 desacoplada em um servi\u00e7o independente. Os microsservi\u00e7os implementados foram:</p> <ul> <li>Product: gerenciamento de produtos dispon\u00edveis na plataforma.</li> <li>Order: respons\u00e1vel pela cria\u00e7\u00e3o e controle de pedidos.</li> <li>Exchange: Realiza convers\u00e3o de c\u00e2mbio de moedas</li> <li>Auth: autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o de usu\u00e1rios.</li> <li>Account: gerenciamento de informa\u00e7\u00f5es de conta dos usu\u00e1rios.</li> </ul> <p>Todos os microsservi\u00e7os s\u00e3o acessados por meio de um API Gateway, que centraliza as requisi\u00e7\u00f5es e encaminha para o servi\u00e7o correspondente, garantindo seguran\u00e7a, escalabilidade e organiza\u00e7\u00e3o da comunica\u00e7\u00e3o entre os componentes.</p>"},{"location":"index%20copy/#diagramas","title":"Diagramas","text":"<p>Use o Mermaid para criar os diagramas de documenta\u00e7\u00e3o.</p> <p>Mermaid Live Editor</p> <pre><code>flowchart TD\n    Deployment:::orange --&gt;|defines| ReplicaSet\n    ReplicaSet --&gt;|manages| pod((Pod))\n    pod:::red --&gt;|runs| Container\n    Deployment --&gt;|scales| pod\n    Deployment --&gt;|updates| pod\n\n    Service:::orange --&gt;|exposes| pod\n\n    subgraph  \n        ConfigMap:::orange\n        Secret:::orange\n    end\n\n    ConfigMap --&gt; Deployment\n    Secret --&gt; Deployment\n    classDef red fill:#f55\n    classDef orange fill:#ffa500</code></pre>"},{"location":"index%20copy/#codigos","title":"C\u00f3digos","text":"De um arquivo remotoAnota\u00e7\u00f5es no c\u00f3digo main.yaml<pre><code>name: ci\non:\n  - push\n  - pull_request\n\n# Environment\nenv:\n  CI: true\n  PYTHON_VERSION: 3.12\n\n# Jobs to run\njobs:\n\n  # Build and deploy documentation site\n  deploy:\n    if: github.event_name != 'pull_request' &amp;&amp; github.ref == 'refs/heads/main'\n    runs-on: ubuntu-latest\n    steps:\n\n      # Checkout source form GitHub\n      - uses: actions/checkout@v4\n\n      # Install Python runtime and dependencies\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n\n      # pip\n      - run: |\n          pip install -r requirements.txt\n\n      # deploy\n      - run: |\n          mkdocs gh-deploy --force\n</code></pre> compose.yaml<pre><code>name: app\n\n    db:\n        image: postgres:17\n        environment:\n            POSTGRES_DB: ${POSTGRES_DB:-projeto} # (1)!\n            POSTGRES_USER: ${POSTGRES_USER:-projeto}\n            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-projeto}\n        ports:\n            - 5432:5432 #(2)!\n</code></pre> <ol> <li> <p>Caso a vari\u00e1vel de ambiente <code>POSTGRES_DB</code> n\u00e3o exista ou seja nula - n\u00e3o seja definida no arquivo <code>.env</code> - o valor padr\u00e3o ser\u00e1 <code>projeto</code>. Vide documenta\u00e7\u00e3o.</p> </li> <li> <p>Aqui \u00e9 feito um t\u00fanel da porta 5432 do container do banco de dados para a porta 5432 do host (no caso localhost). Em um ambiente de produ\u00e7\u00e3o, essa porta n\u00e3o deve ser exposta, pois ningu\u00e9m de fora do compose deveria acessar o banco de dados diretamente.</p> </li> </ol>"},{"location":"index%20copy/#exemplo-de-video","title":"Exemplo de v\u00eddeo","text":"<p>Lorem ipsum dolor sit amet</p>"},{"location":"index%20copy/#referencias","title":"Refer\u00eancias","text":"<p>Material for MkDocs</p>"},{"location":"jenkins/","title":"Integra\u00e7\u00e3o com Jenkins","text":"<p>Este projeto utiliza o Jenkins como ferramenta de integra\u00e7\u00e3o cont\u00ednua (CI) para compilar, testar, construir e implantar automaticamente os microsservi\u00e7os.</p>"},{"location":"jenkins/#visao-geral-da-integracao","title":"Vis\u00e3o Geral da Integra\u00e7\u00e3o","text":"<p>Cada microsservi\u00e7o do sistema (Auth, Account, Product, Order e Gateway) possui um arquivo <code>Jenkinsfile</code> na raiz do reposit\u00f3rio. Esse arquivo define o pipeline automatizado com as seguintes etapas:</p> <ul> <li>Build: Compila\u00e7\u00e3o do projeto com Maven.</li> <li>Testes (opcional): Execu\u00e7\u00e3o de testes unit\u00e1rios (se aplic\u00e1vel).</li> <li>Build da Imagem Docker: Constru\u00e7\u00e3o de uma imagem do servi\u00e7o.</li> <li>Push da Imagem: Envio da imagem para um reposit\u00f3rio Docker (Docker Hub, GitHub Packages etc.).</li> <li>Deploy: Implanta\u00e7\u00e3o em um cluster Kubernetes ou outro ambiente configurado.</li> </ul>"},{"location":"jenkins/#organizacao-no-jenkins","title":"Organiza\u00e7\u00e3o no Jenkins","text":"<p>No Jenkins, os pipelines foram organizados por microsservi\u00e7o. Cada reposit\u00f3rio possui um job que \u00e9 disparado automaticamente via webhook do GitHub sempre que h\u00e1 um push para o branch <code>main</code>.</p> <ul> <li>Exemplo de pipelines:</li> <li><code>auth-service</code></li> <li><code>account-service</code></li> <li><code>product-service</code></li> <li><code>order-service</code></li> <li><code>gateway</code></li> </ul>"},{"location":"jenkins/#exemplo-de-dashboard","title":"Exemplo de Dashboard","text":"<p>Abaixo est\u00e1 uma captura de tela da interface do Jenkins, mostrando o status dos pipelines dos microsservi\u00e7os ap\u00f3s execu\u00e7\u00e3o autom\u00e1tica.</p> <p></p>"},{"location":"jenkins/#jenkinsfile-exemplo","title":"Jenkinsfile - Exemplo","text":"<p>Os arquivos <code>Jenkinsfile</code> seguem o padr\u00e3o abaixo, adaptado para cada microsservi\u00e7o. Aqui est\u00e1 um exemplo para o servi\u00e7o de produtos:</p> <pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'product-service'\n        NAME = \"rafaelaafferri/${env.SERVICE}\"\n    }\n    stages {\n        stage('Dependecies') {\n            steps {\n                build job: 'product', wait: true\n            }\n        }\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(credentialsId: 'dockerhub-credential', usernameVariable: 'USERNAME', passwordVariable: 'TOKEN')]) {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f Dockerfile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n        stage('Deploy') { \n            steps {\n                sh 'kubectl apply -f k8s/k8s.yaml'\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"minikube/","title":"Implanta\u00e7\u00e3o com Kubernetes","text":"<p>Este projeto foi implantado usando Kubernetes tanto em ambiente local com o Minikube quanto em ambiente na AWS, utilizando um cluster gerenciado pelo Amazon EKS.</p>"},{"location":"minikube/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>A aplica\u00e7\u00e3o foi containerizada com Docker e orquestrada com Kubernetes, permitindo:</p> <ul> <li>Escalabilidade horizontal dos microsservi\u00e7os.</li> <li>Isolamento entre componentes (Auth, Product, Order, Account, Gateway).</li> <li>Facilidade de deploy com arquivos YAML versionados.</li> <li>Transi\u00e7\u00e3o suave entre ambiente local e nuvem.</li> </ul>"},{"location":"minikube/#estrutura-dos-arquivos-kubernetes","title":"Estrutura dos Arquivos Kubernetes","text":"<p>Cada microsservi\u00e7o possui uma pasta chamada <code>k8s/</code>, que cont\u00e9m os arquivos de configura\u00e7\u00e3o YAML utilizados para definir os deployments e os servi\u00e7os no cluster.</p> <p>Esses arquivos est\u00e3o localizados diretamente nos reposit\u00f3rios dos microsservi\u00e7os:</p> <ul> <li><code>store-auth-service/k8s/</code></li> <li><code>store-account-service/k8s/</code></li> <li><code>store-product-service/k8s/</code></li> <li><code>order-service/k8s/</code></li> <li><code>store-gateway/k8s/</code></li> </ul> <p>Os arquivos k8s.yaml incluem:</p> <ul> <li>Deployment: define os pods, containers, replicas, ports e vari\u00e1veis de ambiente.</li> <li>Service: define os servi\u00e7os (tipo <code>ClusterIP</code> ou <code>LoadBalancer</code>) para expor os pods internamente ou externamente.</li> </ul>"},{"location":"minikube/#deploy-local-com-minikube","title":"Deploy Local com Minikube","text":"<p>Para testar localmente, utilizei o Minikube, que permite rodar um cluster Kubernetes no computador pessoal.</p>"},{"location":"minikube/#comandos-utilizados","title":"Comandos utilizados:","text":"<pre><code>minikube start\nkubectl apply -f k8s/\n</code></pre> <p>Ap\u00f3s esses comandos, os servi\u00e7os ficaram acess\u00edveis atrav\u00e9s dos IPs expostos pelo <code>minikube tunnel</code>.</p>"},{"location":"minikube/#deploy-em-ambiente-aws-eks","title":"Deploy em Ambiente AWS (EKS)","text":"<p>Na nuvem, a aplica\u00e7\u00e3o foi implantada no Amazon Elastic Kubernetes Service (EKS), um servi\u00e7o gerenciado da AWS para clusters Kubernetes.</p>"},{"location":"minikube/#passos-principais","title":"Passos principais:","text":"<ol> <li> <p>Cria\u00e7\u00e3o do cluster com <code>eksctl</code>: <pre><code>eksctl create cluster --name store-cluster --region us-east-1 --nodes 2\n</code></pre></p> </li> <li> <p>Configura\u00e7\u00e3o do <code>kubectl</code> com a AWS: <pre><code>aws eks --region us-east-1 update-kubeconfig --name store-cluster\n</code></pre></p> </li> <li> <p>Aplica\u00e7\u00e3o dos arquivos YAML: <pre><code>kubectl apply -f k8s/\n</code></pre></p> </li> <li> <p>Exposi\u00e7\u00e3o dos servi\u00e7os principais via LoadBalancer, especialmente o Gateway: <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: gateway\nspec:\n  type: LoadBalancer\n  ports:\n    - port: 80\n      targetPort: 8080\n</code></pre></p> </li> </ol>"},{"location":"minikube/#monitoramento-e-testes","title":"Monitoramento e Testes","text":"<p>Para acompanhar os pods e servi\u00e7os:</p> <pre><code>kubectl get pods\nkubectl get services\nkubectl describe pod &lt;nome-do-pod&gt;\n</code></pre>"},{"location":"minikube/#kubernetes-em-acao","title":"Kubernetes em A\u00e7\u00e3o","text":"<p>Localmente: </p> <p>Na AWS: </p>"},{"location":"minikube/#tecnologias-utilizadas","title":"Tecnologias Utilizadas","text":"<ul> <li>Kubernetes</li> <li>Minikube</li> <li>Amazon EKS</li> <li>kubectl</li> <li>eksctl</li> <li>Docker</li> <li>YAML</li> </ul>"},{"location":"bottlenecks/cache/","title":"Cache com Redis","text":"<p>Para melhorar o desempenho das consultas por ID nos microsservi\u00e7os, foi utilizado Redis como mecanismo de cache.</p>"},{"location":"bottlenecks/cache/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>Ao buscar repetidamente por entidades espec\u00edficas (como produtos, contas ou pedidos) por seu ID, o sistema consultava diretamente o banco de dados. Com o uso do Redis, as respostas para essas requisi\u00e7\u00f5es passam a ser armazenadas em cache, o que reduz a carga no banco e acelera o tempo de resposta.</p>"},{"location":"bottlenecks/cache/#onde-o-cache-foi-aplicado","title":"Onde o Cache foi Aplicado","text":"<p>O cache com Redis foi implementado nos seguintes microsservi\u00e7os:</p> <ul> <li>Product Service: busca por produto via <code>/product/{id}</code></li> <li>Account Service: busca por conta com base no usu\u00e1rio e senha enviado em <code>/account/login\"</code></li> <li>Order Service: busca por pedido via <code>/order/{id}</code></li> </ul> <p>A l\u00f3gica do cache foi aplicada apenas para requisi\u00e7\u00f5es <code>GET</code> que utilizam o ID como chave \u00fanica.</p>"},{"location":"bottlenecks/cache/#funcionamento","title":"Funcionamento","text":"<ol> <li>Quando uma requisi\u00e7\u00e3o <code>GET /entidade/{id}</code> \u00e9 feita:</li> <li>O servi\u00e7o verifica se a entidade com o <code>id</code> j\u00e1 est\u00e1 no Redis.</li> <li>Se estiver, retorna o valor diretamente do cache (resposta r\u00e1pida).</li> <li> <p>Se n\u00e3o estiver, consulta no banco de dados, armazena no Redis e retorna a resposta ao cliente.</p> </li> <li> <p>Se a entidade for atualizada ou removida, o cache \u00e9 invalidado automaticamente ou expira conforme o tempo de vida definido.</p> </li> </ol>"},{"location":"bottlenecks/cache/#configuracao-spring-boot-redis","title":"Configura\u00e7\u00e3o (Spring Boot + Redis)","text":"<p>Nos arquivos de configura\u00e7\u00e3o do Spring Boot, foram adicionadas as seguintes linhas para habilitar o cache com Redis:</p> <pre><code>spring:\n  cache:\n    type: redis\n</code></pre>"},{"location":"bottlenecks/cache/#anotacoes-nas-classes-java","title":"Anota\u00e7\u00f5es nas classes Java","text":"<p>Para habilitar o cache nas classes de servi\u00e7o, foram utilizadas anota\u00e7\u00f5es que seguem este padr\u00e3o:</p> <pre><code>@Cacheable(\"productId\")\n    public Product findById(String id) {\n        return productRepository.findById(id).get().to();\n    }\n</code></pre>"},{"location":"bottlenecks/cache/#tecnologias-utilizadas","title":"Tecnologias Utilizadas","text":"<ul> <li>Spring Cache</li> <li>Redis (como store de cache)</li> <li>Docker para executar o Redis localmente em container</li> </ul>"},{"location":"bottlenecks/observabilidade/","title":"Observabilidade com Grafana e Prometheus","text":"<p>Este projeto utiliza Prometheus e Grafana para monitoramento e observabilidade dos microsservi\u00e7os implantados com Kubernetes.</p>"},{"location":"bottlenecks/observabilidade/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>A observabilidade da aplica\u00e7\u00e3o foi estruturada com os seguintes objetivos:</p> <ul> <li>Coletar m\u00e9tricas de sa\u00fade e desempenho dos microsservi\u00e7os.</li> <li>Visualizar o comportamento da aplica\u00e7\u00e3o em tempo real.</li> <li>Identificar gargalos ou falhas rapidamente.</li> </ul>"},{"location":"bottlenecks/observabilidade/#ferramentas-utilizadas","title":"Ferramentas Utilizadas","text":"Ferramenta Fun\u00e7\u00e3o Prometheus Coleta e armazena m\u00e9tricas expostas pelos servi\u00e7os via endpoint <code>/actuator/prometheus</code> Grafana Visualiza as m\u00e9tricas coletadas em dashboards personaliz\u00e1veis"},{"location":"bottlenecks/observabilidade/#coleta-de-metricas-com-prometheus","title":"Coleta de M\u00e9tricas com Prometheus","text":"<p>Para este projeto, o Prometheus foi configurado para coletar m\u00e9tricas do microsservi\u00e7o de Gateway, pois ele \u00e9 o respons\u00e1vel por receber e rotear todas as requisi\u00e7\u00f5es que chegam \u00e0 aplica\u00e7\u00e3o.</p> <p>Dessa forma, conseguimos observar:</p> <ul> <li>Quantidade de requisi\u00e7\u00f5es recebidas</li> <li>Lat\u00eancia de resposta</li> <li>Erros por endpoint</li> <li>Tr\u00e1fego geral da aplica\u00e7\u00e3o</li> </ul>"},{"location":"bottlenecks/observabilidade/#exposicao-do-endpoint","title":"Exposi\u00e7\u00e3o do endpoint","text":"<p>O microsservi\u00e7o de Gateway foi configurado com Spring Boot Actuator para expor m\u00e9tricas em:</p> <pre><code>/actuator/prometheus\n</code></pre>"},{"location":"bottlenecks/observabilidade/#arquivo-applicationyaml","title":"Arquivo <code>application.yaml</code>:","text":"<p>Neste arquivo foram adicionadas as configura\u00e7\u00f5es necess\u00e1rias para expor o endpoint de m\u00e9tricas do Prometheus. <pre><code>management:\n  endpoints:\n    web:\n      exposure:\n        include: prometheus\n  endpoint:\n    prometheus:\n      enabled: true\n</code></pre></p>"},{"location":"bottlenecks/observabilidade/#arquivo-prometheusyml","title":"Arquivo <code>prometheus.yml</code>:","text":"<p>Neste arquivo foram definidas as configura\u00e7\u00f5es de coleta de m\u00e9tricas do Prometheus, incluindo o endpoint do Gateway. <pre><code>scrape_configs:\n\n- job_name: 'GatewayMetrics'\n  metrics_path: '/gateway/actuator/prometheus'\n  scrape_interval: 1s\n  static_configs:\n    - targets:\n        - gateway:8080\n      labels:\n        application: 'Gateway Application'\n</code></pre></p>"},{"location":"bottlenecks/observabilidade/#visualizacao-com-grafana","title":"Visualiza\u00e7\u00e3o com Grafana","text":"<p>O Grafana foi configurado para se conectar ao Prometheus como fonte de dados principal.</p>"},{"location":"bottlenecks/observabilidade/#dashboard","title":"Dashboard","text":"<p>Um dashboard foi criado no Grafana para monitorar:</p> <ul> <li>Uso de CPU e mem\u00f3ria</li> <li>N\u00famero de requisi\u00e7\u00f5es recebidas pelo gateway</li> <li>Tempo de resposta por rota</li> <li>Status do servi\u00e7o</li> </ul>"},{"location":"bottlenecks/observabilidade/#exemplo-de-fonte-de-dados-prometheus","title":"Exemplo de Fonte de Dados (Prometheus):","text":"<ul> <li>URL: <code>http://prometheus:9090</code></li> <li>Tipo: Prometheus</li> <li>Acesso: proxy</li> </ul>"},{"location":"bottlenecks/observabilidade/#acesso-ao-grafana","title":"Acesso ao Grafana","text":"<p>O servi\u00e7o do Grafana foi exposto via NodePort ou LoadBalancer no cluster, tornando poss\u00edvel acessar a interface gr\u00e1fica via navegador.</p>"},{"location":"bottlenecks/observabilidade/#exemplo","title":"Exemplo:","text":"<pre><code>http://localhost:3000\n</code></pre> <p>As credenciais padr\u00e3o de acesso ao Grafana s\u00e3o: - Usu\u00e1rio: <code>admin</code> - Senha: <code>admin</code></p>"},{"location":"bottlenecks/observabilidade/#dashboard-do-grafana","title":"Dashboard do Grafana","text":""},{"location":"bottlenecks/observabilidade/#tecnologias","title":"Tecnologias","text":"<ul> <li>Prometheus (coleta de m\u00e9tricas)</li> <li>Grafana (dashboards de visualiza\u00e7\u00e3o)</li> <li>Spring Boot Actuator (exposi\u00e7\u00e3o das m\u00e9tricas)</li> <li>Docker + Kubernetes para orquestra\u00e7\u00e3o dos servi\u00e7os</li> </ul>"},{"location":"microservicos/account/","title":"Microsservi\u00e7o de Conta (Account)","text":"<p>Este microsservi\u00e7o \u00e9 respons\u00e1vel pela cria\u00e7\u00e3o, autentica\u00e7\u00e3o e recupera\u00e7\u00e3o de informa\u00e7\u00f5es das contas de usu\u00e1rio na plataforma.</p>"},{"location":"microservicos/account/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O servi\u00e7o de contas \u00e9 dividido em duas partes principais:</p> <ul> <li> <p>Interface: Localizada no seguinte Reposit\u00f3rio, define o contrato da API e os DTOs (Data Transfer Objects). Ela cont\u00e9m:</p> <ul> <li><code>AccountController.java</code>: define as rotas p\u00fablicas do microsservi\u00e7o de conta.</li> <li><code>AccountIn.java</code>: define o DTO de entrada para criar ou autenticar uma conta.</li> <li><code>AccountOut.java</code>: define o DTO de sa\u00edda com os dados da conta retornados para o cliente.</li> </ul> </li> <li> <p>Service: Localizado no seguinte Reposit\u00f3rio, cont\u00e9m a l\u00f3gica de neg\u00f3cio relacionada \u00e0s contas, incluindo cria\u00e7\u00e3o, login e identifica\u00e7\u00e3o de usu\u00e1rios. Os principais arquivos s\u00e3o:</p> <ul> <li><code>AccountApplication.java</code>: classe principal que inicia o servi\u00e7o.</li> <li><code>Account.java</code>: classe correspondente \u00e0 entidade de conta, representando os dados persistidos.</li> <li><code>AccountModel.java</code>: modelos de dados a serem utilizados pelo banco de dados.</li> <li><code>AccountRepository.java</code>: interface que lida com a persist\u00eancia de dados usando Spring Data.</li> <li><code>AccountService.java</code>: cont\u00e9m as regras de neg\u00f3cio de contas (criar, autenticar, listar, etc.).</li> <li><code>AccountParser.java</code>: faz a convers\u00e3o entre DTOs e entidades.</li> <li><code>AccountResource.java</code>: implementa os endpoints definidos na interface <code>AccountController</code>.</li> </ul> </li> </ul>"},{"location":"microservicos/account/#principais-rotas-da-api-account","title":"Principais Rotas da API Account","text":"M\u00e9todo Rota Descri\u00e7\u00e3o POST <code>/account</code> Cria uma nova conta de usu\u00e1rio GET <code>/account</code> Lista todas as contas registradas POST <code>/account/login</code> Busca conta por e-mail e senha (autentica\u00e7\u00e3o) GET <code>/account/whoami</code> Retorna dados da conta com base no ID enviado"},{"location":"microservicos/account/#exemplos-de-uso","title":"Exemplos de Uso","text":""},{"location":"microservicos/account/#criar-conta","title":"Criar Conta","text":"<p>Endpoint: <code>/account</code> </p> <p>M\u00e9todo: <code>POST</code> </p> <p>Corpo da Requisi\u00e7\u00e3o: <pre><code>{\n  \"name\": \"Rafaela\",\n  \"email\": \"rafaela@insper.edu.br\",\n  \"password\": \"123456\"\n}\n</code></pre></p> <p>Resposta: <pre><code>{\n    \"id\": \"1234\",\n    \"name\": \"Rafaela\",\n    \"email\": \"rafaela@insper.edu.br\",\n}\n</code></pre></p>"},{"location":"microservicos/account/#listar-contas","title":"Listar Contas","text":"<p>Endpoint: <code>/account</code></p> <p>M\u00e9todo: <code>GET</code></p> <p>Resposta: <pre><code>[\n    {\n        \"id\": \"1234\",\n        \"name\": \"Rafaela\",\n        \"email\": \"rafaela@insper.edu.br\"\n    },\n    {\n        \"id\": \"5678\",\n        \"name\": \"Jo\u00e3o\",\n        \"email\": \"joado@insper.edu.br\",\n    },\n]\n</code></pre></p>"},{"location":"microservicos/account/#buscar-conta-autenticar","title":"Buscar Conta (Autenticar)","text":"<p>Endpoint: <code>/account/login</code></p> <p>M\u00e9todo: <code>POST</code></p> <p>Corpo da Requisi\u00e7\u00e3o: <pre><code>{\n  \"email\": \"rafaela@insper.edu.br\",\n  \"password\": \"123456\"\n}\n</code></pre> Resposta: <pre><code>{\n    \"id\": \"1234\",\n    \"name\": \"Rafaela\",\n    \"email\": \"rafaela@insper.edu.br\"\n}\n</code></pre></p>"},{"location":"microservicos/account/#identificar-conta","title":"Identificar Conta","text":"<p>Endpoint: <code>/account/whoami</code></p> <p>M\u00e9todo: <code>GET</code></p> <p>Cabe\u00e7alho da Requisi\u00e7\u00e3o: <pre><code>id-account: 1234\n</code></pre></p> <p>Resposta: <pre><code>{\n    \"id\": \"1234\",\n    \"name\": \"Rafaela\",\n    \"email\": \"rafaela@insper.edu.br\"\n}\n</code></pre></p>"},{"location":"microservicos/account/#armazenamento-de-dados","title":"Armazenamento de Dados","text":"<p>Os dados das contas s\u00e3o armazenados em um banco de dados PostgreSQL, que \u00e9 configurado no arquivo separadamente, mas pode ser encontrado no arquivo <code>compose.yaml</code> neste Reposit\u00f3rio. A tabela por outro lado \u00e9 configurada no arquivos encontrados no caminho <code>src\\main\\resources\\db\\migration</code> e cont\u00e9m os seguintes campos:</p> campo Tipo Descri\u00e7\u00e3o id_account VARCHAR(36) Identificador \u00fanico da conta (UUID) tx_name VARCHAR(256) Nome do usu\u00e1rio tx_email VARCHAR(256) E-mail do usu\u00e1rio tx_sha256 VARCHAR(256) Senha do usu\u00e1rio (armazenada de forma segura com hash) dt_birthdate DATE Data de nascimento do usu\u00e1rio dt_creation TIMESTAMP Data de cria\u00e7\u00e3o da conta"},{"location":"microservicos/account/#tecnologias-utilizadas","title":"Tecnologias Utilizadas","text":"<ul> <li>Java 21</li> <li>Spring Boot 3</li> <li>Spring Web / REST</li> <li>JWT (JSON Web Token) para autentica\u00e7\u00e3o stateless</li> <li>Maven como gerenciador de depend\u00eancias</li> <li>Docker e Kubernetes (k8s) para orquestra\u00e7\u00e3o</li> <li>Jenkins para integra\u00e7\u00e3o cont\u00ednua</li> </ul>"},{"location":"microservicos/auth/","title":"Microsservi\u00e7o de Autentica\u00e7\u00e3o (Auth)","text":"<p>Este microsservi\u00e7o \u00e9 respons\u00e1vel pelo controle de autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o dos usu\u00e1rios da plataforma.</p>"},{"location":"microservicos/auth/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O servi\u00e7o de autentica\u00e7\u00e3o \u00e9 dividido em duas partes principais:</p> <ul> <li> <p>Interface: Encontrado no seguinte Reposit\u00f3rio possui a defini\u00e7\u00e3o do contrato da API e os modelos de DTOs (Data Transfer Objects). Ela possu\u00ed o seguintes arquivos:</p> <ul> <li>AuthContoller.java: define a interface com as rotas da API expostas no gateway.</li> <li>LoginIn.java: define o DTO de entrada para o login.</li> <li>RegisterIn.java: define o DTO de entrada para o registro.</li> <li>SolveOut.java: define o DTO de sa\u00edda para a valida\u00e7\u00e3o do token JWT.</li> <li>TokenOut.java: define o DTO de sa\u00edda para o token JWT.</li> </ul> </li> <li> <p>Service: Encontrado no seguinte Reposit\u00f3rio, implementa a l\u00f3gica de autentica\u00e7\u00e3o do usu\u00e1rio, incluindo o registro, login e valida\u00e7\u00e3o de tokens JWT. Ele cont\u00e9m os seguintes arquivos:</p> <ul> <li>AuthApplication.java: classe principal que inicia o servi\u00e7o.</li> <li>AuthParser.java: respons\u00e1vel por transformar os DTOs de entrada e sa\u00edda.</li> <li>AuthResource.java: implementa os endpoints definidos na interface <code>AuthController</code>.</li> <li>AuthService.java: cont\u00e9m a l\u00f3gica de autentica\u00e7\u00e3o, incluindo o registro de usu\u00e1rios, login e valida\u00e7\u00e3o de tokens JWT.</li> <li>JwtService.java: respons\u00e1vel pela cria\u00e7\u00e3o e valida\u00e7\u00e3o de tokens JWT.</li> <li>Register.java: modelo de dados para o registro de usu\u00e1rios.</li> </ul> </li> </ul>"},{"location":"microservicos/auth/#principais-rotas-da-api-auth","title":"Principais Rotas da API Auth","text":"<p>O controlador principal \u00e9 a interface <code>AuthController</code>, cujos endpoints s\u00e3o implementados por <code>AuthResource</code>.</p> M\u00e9todo Rota Descri\u00e7\u00e3o POST <code>/auth/register</code> Cadastra um novo usu\u00e1rio POST <code>/auth/login</code> Realiza o login do usu\u00e1rio POST <code>/auth/solve</code> Decodifica e valida um token JWT"},{"location":"microservicos/auth/#exemplos-de-uso","title":"Exemplos de Uso","text":""},{"location":"microservicos/auth/#registro-de-usuario","title":"Registro de Usu\u00e1rio","text":"<p>Endpoint: <code>/auth/register</code></p> <p>M\u00e9todo: <code>POST</code></p> <p>Corpo da Requisi\u00e7\u00e3o: <pre><code>{\n  \"name\": \"Rafaela\",\n  \"email\": \"rafaela@insper.edu.br\",\n  \"password\": \"123456\"\n}\n</code></pre></p> <p>Resposta: <pre><code>{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}\n</code></pre></p>"},{"location":"microservicos/auth/#login-de-usuario","title":"Login de Usu\u00e1rio","text":"<p>Endpoint: <code>/auth/login</code></p> <p>M\u00e9todo: <code>POST</code></p> <p>Corpo da Requisi\u00e7\u00e3o: <pre><code>{\n  \"email\": \"rafaela@insper.edu.br\",\n  \"password\": \"123456\"\n}\n</code></pre></p> <p>Resposta: <pre><code>{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}\n</code></pre></p>"},{"location":"microservicos/auth/#validacao-de-token-jwt","title":"Valida\u00e7\u00e3o de Token JWT","text":"<p>Endpoint: <code>/auth/solve</code></p> <p>M\u00e9todo: <code>POST</code></p> <p>Corpo da Requisi\u00e7\u00e3o: <pre><code>{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}\n</code></pre></p> <p>Resposta: <pre><code>{\n  \"email\": \"rafaela@insper.edu.br\",\n  \"sub\": \"1234\",\n  \"iat\": 1717440000\n}\n</code></pre></p>"},{"location":"microservicos/auth/#tecnologias-utilizadas","title":"Tecnologias Utilizadas","text":"<ul> <li>Java 21</li> <li>Spring Boot 3</li> <li>Spring Web / REST</li> <li>JWT (JSON Web Token) para autentica\u00e7\u00e3o stateless</li> <li>Maven como gerenciador de depend\u00eancias</li> <li>Docker e Kubernetes (k8s) para orquestra\u00e7\u00e3o</li> <li>Jenkins para integra\u00e7\u00e3o cont\u00ednua</li> </ul>"},{"location":"microservicos/gateway/","title":"API Gateway","text":"<p>O API Gateway \u00e9 o ponto de entrada principal da plataforma. Ele atua como um intermedi\u00e1rio entre os clientes (frontend, mobile, etc.) e os microsservi\u00e7os da arquitetura.</p>"},{"location":"microservicos/gateway/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O gateway \u00e9 respons\u00e1vel por:</p> <ul> <li>Centralizar e rotear requisi\u00e7\u00f5es para os servi\u00e7os apropriados (ex: <code>/auth</code>, <code>/product</code>, <code>/order</code>, etc.).</li> <li>Aplicar filtros de seguran\u00e7a, como autentica\u00e7\u00e3o e CORS.</li> <li>Expor informa\u00e7\u00f5es b\u00e1sicas sobre o ambiente com o endpoint <code>/info</code>.</li> </ul>"},{"location":"microservicos/gateway/#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<p>Reposit\u00f3rio: store_gateway</p>"},{"location":"microservicos/gateway/#principais-arquivos","title":"Principais Arquivos","text":"<ul> <li><code>GatewayApplication.java</code>: classe principal que inicializa o Spring Boot Gateway.</li> <li><code>GatewayResource.java</code>: exp\u00f5e um endpoint <code>/info</code> para verificar informa\u00e7\u00f5es da m\u00e1quina em execu\u00e7\u00e3o.</li> <li><code>security/AuthorizationFilter.java</code>: filtro que verifica se a requisi\u00e7\u00e3o possui o header de autentica\u00e7\u00e3o adequado (<code>id-account</code>) antes de encaminhar para os servi\u00e7os protegidos.</li> <li><code>security/CorsFilter.java</code>: aplica pol\u00edtica de CORS, liberando chamadas do frontend.</li> <li><code>security/RouterValidator.java</code>: define quais rotas precisam de autentica\u00e7\u00e3o.</li> <li><code>security/TokenOut.java</code> / <code>SolveOut.java</code>: DTOs auxiliares para comunica\u00e7\u00e3o com o servi\u00e7o de autentica\u00e7\u00e3o.</li> </ul>"},{"location":"microservicos/gateway/#roteamento-e-seguranca","title":"Roteamento e Seguran\u00e7a","text":"<p>O gateway utiliza filtros customizados para proteger rotas:</p> <ul> <li>Rotas p\u00fablicas como <code>/auth/login</code> e <code>/auth/register</code> n\u00e3o exigem autentica\u00e7\u00e3o.</li> <li>Rotas privadas como <code>/order</code>, <code>/account/whoami</code> ou <code>/product</code> exigem o cabe\u00e7alho <code>id-account</code>.</li> </ul>"},{"location":"microservicos/gateway/#exemplo-de-cabecalho-de-autenticacao","title":"Exemplo de cabe\u00e7alho de autentica\u00e7\u00e3o","text":"<pre><code>id-account: 1234\n</code></pre> <p>Se o header estiver ausente em uma rota protegida, o gateway retorna um erro <code>403 Forbidden</code>.</p>"},{"location":"microservicos/gateway/#endpoint-info","title":"Endpoint <code>/info</code>","text":"<p>O endpoint <code>/info</code> pode ser acessado em:</p> <pre><code>GET /info\n</code></pre>"},{"location":"microservicos/gateway/#exemplo-de-resposta","title":"Exemplo de resposta:","text":"<pre><code>{\n  \"hostname\": \"gateway-container\",\n  \"os.arch\": \"amd64\",\n  \"os.name\": \"Linux\",\n  \"os.version\": \"5.10.0-23-amd64\"\n}\n</code></pre> <p>Este endpoint \u00e9 \u00fatil para depura\u00e7\u00e3o e verifica\u00e7\u00e3o da infraestrutura em tempo real (por exemplo, em ambientes com m\u00faltiplos pods Kubernetes).</p>"},{"location":"microservicos/gateway/#tecnologias-utilizadas","title":"Tecnologias Utilizadas","text":"<ul> <li>Java 21</li> <li>Spring Boot 3</li> <li>Spring Cloud Gateway</li> <li>Spring Security (filtros personalizados)</li> <li>Docker e Kubernetes (k8s)</li> <li>Jenkins para integra\u00e7\u00e3o cont\u00ednua</li> </ul>"},{"location":"microservicos/order/","title":"Microsservi\u00e7o de Pedidos (Order)","text":"<p>Este microsservi\u00e7o \u00e9 respons\u00e1vel por registrar, consultar e listar os pedidos realizados pelos usu\u00e1rios da plataforma.</p>"},{"location":"microservicos/order/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O servi\u00e7o de pedidos \u00e9 dividido em duas partes principais:</p> <ul> <li> <p>Interface: Localizada no seguinte Reposit\u00f3rio, define o contrato da API e os DTOs (Data Transfer Objects). Ela cont\u00e9m:</p> <ul> <li><code>OrderController.java</code>: define as rotas p\u00fablicas do microsservi\u00e7o de pedidos.</li> <li><code>OrderIn.java</code>: define o DTO de entrada para cria\u00e7\u00e3o de pedidos.</li> <li><code>OrderOut.java</code>: define o DTO de sa\u00edda com os dados retornados.</li> <li><code>ItemIn.java</code> / <code>ItemOut.java</code>: DTOs auxiliares para representar os itens do pedido.</li> </ul> </li> <li> <p>Service: Localizado no seguinte Reposit\u00f3rio, cont\u00e9m a l\u00f3gica de neg\u00f3cio de pedidos. Os principais arquivos s\u00e3o:</p> <ul> <li><code>OrderApplication.java</code>: classe principal que inicia o servi\u00e7o.</li> <li><code>Order.java</code>: classe correspondente \u00e0 entidade de pedido.</li> <li><code>Item.java</code>: entidade representando um item dentro de um pedido.</li> <li><code>OrderModel.java</code> / <code>ItemModel.java</code>: modelos de dados persistentes.</li> <li><code>OrderRepository.java</code> / <code>ItemRepository.java</code>: interfaces de persist\u00eancia.</li> <li><code>OrderService.java</code>: cont\u00e9m a l\u00f3gica de cria\u00e7\u00e3o e recupera\u00e7\u00e3o de pedidos.</li> <li><code>OrderParser.java</code>: faz a convers\u00e3o entre DTOs e entidades.</li> <li><code>OrderResource.java</code>: implementa os endpoints definidos na interface <code>OrderController</code>.</li> </ul> </li> </ul>"},{"location":"microservicos/order/#principais-rotas-da-api-order","title":"Principais Rotas da API Order","text":"M\u00e9todo Rota Descri\u00e7\u00e3o POST <code>/order</code> Cria um novo pedido para um usu\u00e1rio GET <code>/order</code> Lista todos os pedidos de um usu\u00e1rio GET <code>/order/{id}</code> Retorna os dados de um pedido espec\u00edfico por ID"},{"location":"microservicos/order/#exemplos-de-uso","title":"Exemplos de Uso","text":""},{"location":"microservicos/order/#criar-pedido","title":"Criar Pedido","text":"<p>Endpoint: <code>/order</code> </p> <p>M\u00e9todo: <code>POST</code> </p> <p>Cabe\u00e7alho: <pre><code>id-account: 1234\n</code></pre></p> <p>Corpo da Requisi\u00e7\u00e3o: <pre><code>{\n  \"items\": [\n    {\n      \"idProduct\": \"abc123\",\n      \"quantity\": 2\n    },\n    {\n      \"idProduct\": \"xyz456\",\n      \"quantity\": 1\n    }\n  ]\n}\n</code></pre></p> <p>Resposta: <pre><code>{\n    \"id\": \"86e9badd-dab1-4352-9f9d-d8cc1c939da5\",\n    \"date\": \"2025-06-03T18:14:01.085+00:00\",\n    \"items\": [\n        {\n            \"id\": \"abf0b165-aa83-451f-88eb-9a2eab701a5b\",\n            \"product\": {\n                \"id\": \"a731202b-4deb-44be-b23f-4c381eff23ac\",\n                \"name\": null,\n                \"price\": null,\n                \"unit\": null\n            },\n            \"quantity\": 2,\n            \"total\": 4.0\n        },\n        {\n            \"id\": \"c2f0b165-aa83-451f-88eb-9a2eab701a5c\",\n            \"product\": {\n                \"id\": \"b731202b-4deb-44be-b23f-4c381eff23ad\",\n                \"name\": null,\n                \"price\": null,\n                \"unit\": null\n            },\n            \"quantity\": 1,\n            \"total\": 2.0\n        }\n    ],\n    \"total\": 6.0\n}\n</code></pre></p>"},{"location":"microservicos/order/#listar-pedidos","title":"Listar Pedidos","text":"<p>Endpoint: <code>/order</code> M\u00e9todo: <code>GET</code> Cabe\u00e7alho: <pre><code>id-account: 1234\n</code></pre></p> <p>Resposta: <pre><code>[\n  {\n    \"id\": \"order789\",\n    \"items\": [\n      {\n        \"idProduct\": \"abc123\",\n        \"quantity\": 2\n      }\n    ],\n    \"idAccount\": \"1234\",\n    \"date\": \"2025-06-03T12:00:00Z\"\n  }\n]\n</code></pre></p>"},{"location":"microservicos/order/#buscar-pedido-por-id","title":"Buscar Pedido por ID","text":"<p>Endpoint: <code>/order/{id}</code> M\u00e9todo: <code>GET</code> Exemplo: <code>/order/order789</code> Cabe\u00e7alho: <pre><code>id-account: 1234\n</code></pre></p> <p>Resposta: <pre><code>[\n    {\n        \"id\": \"86e9badd-dab1-4352-9f9d-d8cc1c939da5\",\n        \"date\": \"2025-06-03T00:00:00.000+00:00\",\n        \"items\": [],\n        \"total\": 6.0\n    }\n]\n</code></pre></p>"},{"location":"microservicos/order/#armazenamento-de-dados","title":"Armazenamento de Dados","text":"<p>Os pedidos e itens s\u00e3o armazenados em um banco de dados PostgreSQL. A estrutura de tabelas \u00e9 definida nos arquivos de migra\u00e7\u00e3o e cont\u00e9m os seguintes campos principais:</p>"},{"location":"microservicos/order/#tabela-order","title":"Tabela <code>order</code>","text":"campo tipo descri\u00e7\u00e3o id_order VARCHAR(36) Identificador \u00fanico do pedido id_account VARCHAR(36) ID do usu\u00e1rio que realizou o pedido dt_date DATE Data de cria\u00e7\u00e3o do pedido nr_total DECIMAL(10, 2) Valor total do pedido"},{"location":"microservicos/order/#tabela-item","title":"Tabela <code>item</code>","text":"campo tipo descri\u00e7\u00e3o id_item VARCHAR(36) Identificador do item id_order VARCHAR(36) Refer\u00eancia ao pedido id_product VARCHAR(36) Produto relacionado nr_quantity INT Quantidade solicitada nr_total DECIMAL(10, 2) Valor total do item"},{"location":"microservicos/order/#tecnologias-utilizadas","title":"Tecnologias Utilizadas","text":"<ul> <li>Java 21</li> <li>Spring Boot 3</li> <li>Spring Web / REST</li> <li>Spring Data JPA</li> <li>PostgreSQL como banco de dados</li> <li>Maven como gerenciador de depend\u00eancias</li> <li>Docker e Kubernetes (k8s) para orquestra\u00e7\u00e3o</li> <li>Jenkins para integra\u00e7\u00e3o cont\u00ednua</li> </ul>"},{"location":"microservicos/product/","title":"Microsservi\u00e7o de Produtos (Product)","text":"<p>Este microsservi\u00e7o \u00e9 respons\u00e1vel pelo cadastro, listagem, consulta e exclus\u00e3o de produtos dispon\u00edveis na plataforma.</p>"},{"location":"microservicos/product/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O servi\u00e7o de produtos \u00e9 dividido em duas partes principais:</p> <ul> <li> <p>Interface: Localizada no seguinte Reposit\u00f3rio, define o contrato da API e os DTOs (Data Transfer Objects). Ela cont\u00e9m:</p> <ul> <li><code>ProductController.java</code>: define as rotas p\u00fablicas do microsservi\u00e7o de produto.</li> <li><code>ProductIn.java</code>: define o DTO de entrada para cria\u00e7\u00e3o de produtos.</li> <li><code>ProductOut.java</code>: define o DTO de sa\u00edda com os dados retornados.</li> </ul> </li> <li> <p>Service: Localizado no seguinte Reposit\u00f3rio, cont\u00e9m a l\u00f3gica de neg\u00f3cio de produtos. Os principais arquivos s\u00e3o:</p> <ul> <li><code>ProductApplication.java</code>: classe principal que inicia o servi\u00e7o.</li> <li><code>Product.java</code>: classe correspondente \u00e0 entidade de produto no banco.</li> <li><code>ProductModel.java</code>: modelo de dados persistente.</li> <li><code>ProductRepository.java</code>: interface de persist\u00eancia via Spring Data.</li> <li><code>ProductService.java</code>: cont\u00e9m as regras de neg\u00f3cio (criar, listar, buscar e deletar).</li> <li><code>ProductParser.java</code>: faz a convers\u00e3o entre DTOs e entidades.</li> <li><code>ProductResource.java</code>: implementa os endpoints definidos na interface <code>ProductController</code>.</li> </ul> </li> </ul>"},{"location":"microservicos/product/#principais-rotas-da-api-product","title":"Principais Rotas da API Product","text":"M\u00e9todo Rota Descri\u00e7\u00e3o POST <code>/product</code> Cadastra um novo produto GET <code>/product</code> Lista todos os produtos registrados GET <code>/product/{id}</code> Busca um produto espec\u00edfico por ID DELETE <code>/product/{id}</code> Remove um produto com base no ID"},{"location":"microservicos/product/#exemplos-de-uso","title":"Exemplos de Uso","text":""},{"location":"microservicos/product/#criar-produto","title":"Criar Produto","text":"<p>Endpoint: <code>/product</code> </p> <p>M\u00e9todo: <code>POST</code> </p> <p>Corpo da Requisi\u00e7\u00e3o: <pre><code>{\n  \"name\": \"Tomate\",\n  \"price\": 12.99,\n  \"unit\": \"kg\",\n}\n</code></pre> Resposta: <pre><code>{\n  \"id\": \"abc123\",\n  \"name\": \"Tomate\",\n  \"price\": 12.99,\n  \"unit\": \"kg\",\n}\n</code></pre></p>"},{"location":"microservicos/product/#listar-produtos","title":"Listar Produtos","text":"<p>Endpoint: <code>/product</code> </p> <p>M\u00e9todo: <code>GET</code> </p> <p>Resposta: <pre><code>[\n    {\n    \"id\": \"abc123\",\n    \"name\": \"Tomate\",\n    \"price\": 12.99,\n    \"unit\": \"kg\",\n    },\n    {\n    \"id\": \"def456\",\n    \"name\": \"Uva Verde\",\n    \"price\": 15.99,\n    \"unit\": \"kg\",\n]\n</code></pre></p>"},{"location":"microservicos/product/#buscar-produto-por-id","title":"Buscar Produto por ID","text":"<p>Endpoint: <code>/product/{id}</code> </p> <p>M\u00e9todo: <code>GET</code> </p> <p>Exemplo de chamada: <code>/product/abc123</code> </p> <p>Resposta: <pre><code>{\n  \"id\": \"abc123\",\n  \"name\": \"Tomate\",\n  \"price\": 12.99,\n  \"unit\": \"kg\",\n}\n</code></pre></p>"},{"location":"microservicos/product/#deletar-produto","title":"Deletar Produto","text":"<p>Endpoint: <code>/product/{id}</code> </p> <p>M\u00e9todo: <code>DELETE</code> </p> <p>Exemplo de chamada: <code>/product/abc123</code> </p> <p>Resposta: <pre><code>{\n  \"id\": \"abc123\",\n  \"name\": \"Tomate\",\n  \"price\": 12.99,\n  \"unit\": \"kg\",\n}\n</code></pre></p>"},{"location":"microservicos/product/#armazenamento-de-dados","title":"Armazenamento de Dados","text":"<p>Os produtos s\u00e3o armazenados em um banco de dados PostgreSQL, configurado no ambiente Docker e com tabelas definidas nos arquivos de migra\u00e7\u00e3o (<code>src/main/resources/db/migration</code>). Os campos da tabela de produtos s\u00e3o:</p> campo Tipo Descri\u00e7\u00e3o id_product VARCHAR(36) Identificador \u00fanico do produto (UUID) tx_name VARCHAR(256) Nome do produto tx_price DECIMAL(10, 20) Pre\u00e7o unit\u00e1rio do produto tx_unit VARCHAR(64) Unidade de medida do produto (ex: kg, unidade) ---"},{"location":"microservicos/product/#tecnologias-utilizadas","title":"Tecnologias Utilizadas","text":"<ul> <li>Java 21</li> <li>Spring Boot 3</li> <li>Spring Web / REST</li> <li>Spring Data JPA</li> <li>PostgreSQL como banco de dados</li> <li>Maven como gerenciador de depend\u00eancias</li> <li>Docker e Kubernetes (k8s) para orquestra\u00e7\u00e3o</li> <li>Jenkins para integra\u00e7\u00e3o cont\u00ednua</li> </ul>"}]}